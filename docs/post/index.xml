<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 友知弄</title>
    <link>https://yixy.github.io/youzhilane/post/</link>
    <description>Recent content in Posts on 友知弄</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 30 Sep 2019 22:16:33 +0800</lastBuildDate>
    
	<atom:link href="https://yixy.github.io/youzhilane/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go语言测试(2)-使用mock测试</title>
      <link>https://yixy.github.io/youzhilane/post/%E4%BA%91%E8%AE%A1%E7%AE%97/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E6%B5%8B%E8%AF%952-%E4%BD%BF%E7%94%A8mock%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 30 Sep 2019 22:16:33 +0800</pubDate>
      
      <guid>https://yixy.github.io/youzhilane/post/%E4%BA%91%E8%AE%A1%E7%AE%97/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E6%B5%8B%E8%AF%952-%E4%BD%BF%E7%94%A8mock%E6%B5%8B%E8%AF%95/</guid>
      <description>1。 使用接口作为参数，使用官方gomock golang原生单元测试的方法就是尽量使用接口作为参数（函数接收一个 interface类型的参数，</description>
    </item>
    
    <item>
      <title>Go语言测试(1)-单元测试与基准测试</title>
      <link>https://yixy.github.io/youzhilane/post/%E4%BA%91%E8%AE%A1%E7%AE%97/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E6%B5%8B%E8%AF%951-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 30 Sep 2019 22:15:58 +0800</pubDate>
      
      <guid>https://yixy.github.io/youzhilane/post/%E4%BA%91%E8%AE%A1%E7%AE%97/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E6%B5%8B%E8%AF%951-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</guid>
      <description>1. 使用testing包进行单元测试与基准测试 Golang本身提供了对单元测试和基准测试的支持，引入testing包后，遵守如下约定使用即可。</description>
    </item>
    
    <item>
      <title>Go语言测试(3)-go test缓存机制</title>
      <link>https://yixy.github.io/youzhilane/post/%E4%BA%91%E8%AE%A1%E7%AE%97/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E6%B5%8B%E8%AF%953-go-test%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 30 Sep 2019 14:53:49 +0800</pubDate>
      
      <guid>https://yixy.github.io/youzhilane/post/%E4%BA%91%E8%AE%A1%E7%AE%97/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E6%B5%8B%E8%AF%953-go-test%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>1. 单元测试中print时间输出不变的问题 写单元测试的时候发现如下测试案例输出结果不变，但是正常在main函数中编译执行是没有问题的。查了下文</description>
    </item>
    
    <item>
      <title>Go语言测试(4)-基准测试的StartTimer函数与内存分配</title>
      <link>https://yixy.github.io/youzhilane/post/%E4%BA%91%E8%AE%A1%E7%AE%97/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E6%B5%8B%E8%AF%954-%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E7%9A%84starttimer%E5%87%BD%E6%95%B0%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Sat, 28 Sep 2019 21:59:14 +0800</pubDate>
      
      <guid>https://yixy.github.io/youzhilane/post/%E4%BA%91%E8%AE%A1%E7%AE%97/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E6%B5%8B%E8%AF%954-%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E7%9A%84starttimer%E5%87%BD%E6%95%B0%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>1. 一次基准测试时发现的诡异问题 测试代码如下，StringSize和StringSizeBySizeTable两个函数正常应该都是纳秒级别返回</description>
    </item>
    
    <item>
      <title>判断整数的位数</title>
      <link>https://yixy.github.io/youzhilane/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%88%A4%E6%96%AD%E6%95%B4%E6%95%B0%E7%9A%84%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Sat, 28 Sep 2019 21:26:56 +0800</pubDate>
      
      <guid>https://yixy.github.io/youzhilane/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%88%A4%E6%96%AD%E6%95%B4%E6%95%B0%E7%9A%84%E4%BD%8D%E6%95%B0/</guid>
      <description>如何判断整数的位数 判断一个整数的位数的方法很简单，只要循环除以10，直到商为0，循环了几次位数就是几。代码逻辑可以参考下节代码片段中Stri</description>
    </item>
    
    <item>
      <title>与etcd交互</title>
      <link>https://yixy.github.io/youzhilane/post/%E5%88%86%E5%B8%83%E5%BC%8F/etcd/%E4%B8%8Eetcd%E4%BA%A4%E4%BA%92/</link>
      <pubDate>Sat, 28 Sep 2019 09:25:16 +0800</pubDate>
      
      <guid>https://yixy.github.io/youzhilane/post/%E5%88%86%E5%B8%83%E5%BC%8F/etcd/%E4%B8%8Eetcd%E4%BA%A4%E4%BA%92/</guid>
      <description>etcd交互场景 etcd本身是采用Golang实现的，支持多种语言客户端对接，同时也支持HTTP的API。 etcd官方文档（Interact</description>
    </item>
    
    <item>
      <title>ImageMagick</title>
      <link>https://yixy.github.io/youzhilane/post/%E5%85%B6%E4%BB%96/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/imagemagick/</link>
      <pubDate>Thu, 26 Sep 2019 12:50:12 +0800</pubDate>
      
      <guid>https://yixy.github.io/youzhilane/post/%E5%85%B6%E4%BB%96/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/imagemagick/</guid>
      <description>ImageMagick简介 ImageMagick是一套功能强大、稳定而且开源的工具集和开发包，可以用来读、写和处理超过89种基本格式的图片文</description>
    </item>
    
  </channel>
</rss>